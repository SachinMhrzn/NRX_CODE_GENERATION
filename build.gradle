plugins {
    id "net.ltgt.apt-eclipse" version "0.21"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id 'org.liquibase.gradle' version '2.0.1'
}

version "0.1"
group "delphi.backend"

apply plugin: 'java'

sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
    mavenCentral()
}

sourceSets {
    //Declaring this source set creates compile time and runtime configurations for it.
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output

            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly

    integrationTestCompile.extendsFrom testCompile
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestAnnotationProcessor.extendsFrom testAnnotationProcessor
}

dependencies {
    implementation 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'
    annotationProcessor platform("io.micronaut:micronaut-bom:1.2.0")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor("io.micronaut.configuration:micronaut-openapi:1.4.1")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation platform("io.micronaut:micronaut-bom:1.2.0")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:1.2.0")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testCompile 'org.mockito:mockito-core:2.24.0'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    implementation "io.swagger.core.v3:swagger-annotations"
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha4'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.3.0-alpha4'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-secretsmanager', version: '1.11.693'
    liquibaseRuntime 'org.liquibase:liquibase-core:3.6.1'
    implementation "io.micronaut:micronaut-security-jwt"
    annotationProcessor "io.micronaut:micronaut-security"
    compile "io.micronaut:micronaut-security"
    compile group: 'com.amazonaws', name: 'aws-java-sdk-secretsmanager', version: '1.11.699'
    testCompile group: 'com.amazonaws', name: 'aws-java-sdk-secretsmanager', version: '1.11.699'
    annotationProcessor "io.micronaut.data:micronaut-data-processor:1.0.0.M5"
    compile 'io.micronaut.data:micronaut-data-hibernate-jpa:1.0.0.M5'
    implementation "io.micronaut.data:micronaut-data-hibernate-jpa:1.0.0.M5", {
    }
    compile 'io.micronaut.configuration:micronaut-hibernate-validator'

    runtime "io.micronaut.configuration:micronaut-jdbc-hikari"
    compile 'io.micronaut:micronaut-runtime'
    compile 'io.micronaut.configuration:micronaut-liquibase'
    integrationTestCompile group: 'com.h2database', name: 'h2', version: '1.4.200'
    integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    integrationTestRuntimeOnly "ch.qos.logback:logback-classic:1.2.3"

    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile files('libs/ojdbc7.jar')
    implementation files('libs/delphi-util-1.0.jar')
    compile fileTree(dir: 'libs', include: 'delphi-util-1.0.jar')
    liquibaseRuntime files('libs/ojdbc7.jar')

    compile 'io.sentry:sentry-logback:1.7.27'

    implementation group: 'org.postgresql', name: 'postgresql', version: '42.3.3'

    implementation 'io.github.cdimascio:dotenv-java:2.2.0'
}

test.classpath += configurations.developmentOnly

mainClassName = "delphi.backend.EntryPoint"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}

shadowJar {
    mergeServiceFiles()
    zip64 true

}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

tasks.withType(JavaCompile) {
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=swagger-ui.enabled=true,swagger-ui.theme=flattop'
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

tasks.withType(JavaCompile) {
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=swagger-ui.enabled=true,swagger-ui.theme=flattop'
}

integrationTest {
    useJUnitPlatform()
}
